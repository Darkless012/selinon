# Celeriac - Dynamic Task Flow Management on top of Celery

## What is Celeriac and why should I use it?

Celeriac is a tool that gives you a power to define flows, subflows of tasks that should be executed in Celery - a distributed task queue. If you want to define very simple flows, Celery offers you workflow primitives that can be used. Unfortunately these workflow primitives are very limited when it comes to extending your workflow, working with multiple dependencies or scheduling tasks based on particular conditions.

If you are looking for a workflow solution, take a look at existing solutions, such as Azkaban, Airflow, Nifi, Luigi and many others. The main advantage of using Celeriac over these is the fact, that you can use it in fully distributed systems and for example let Kubernetes do the workload (and much more, such as recursive flows, subflows support, ...).

## Is there available a demo?

You can take a look at celeriac-demo so you can see how Celeriac works without deep diving into configuration. Just run `docker-compose up`.

## What do I need?

In order to use Celeriac, you need:

  * a basic knowledge of Python and YAML language
  * a basic knowledge of Celery and its configuration
  * vegetable appetite :)

## How does it work? - a high level overview

The key idea lies in Dispatcher - there is created Dispatcher Celery task for each flow. Dispatcher takes care of starting new tasks and subflows, checking their results and scheduling new tasks based on your configuration.
